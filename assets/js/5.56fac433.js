(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{170:function(e,a,n){"use strict";n.r(a);var t=n(0),o=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"preliminaries"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#preliminaries","aria-hidden":"true"}},[e._v("#")]),e._v(" Preliminaries")]),e._v(" "),n("h2",{attrs:{id:"characters-and-lines"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#characters-and-lines","aria-hidden":"true"}},[e._v("#")]),e._v(" Characters and lines")]),e._v(" "),n("p",[e._v("Any sequence of [characters] is a valid CommonMark\ndocument.")]),e._v(" "),n("p",[e._v("A "),n("a",{attrs:{href:"@"}},[e._v("character")]),e._v(" is a Unicode code point.  Although some\ncode points (for example, combining accents) do not correspond to\ncharacters in an intuitive sense, all code points count as characters\nfor purposes of this spec.")]),e._v(" "),n("p",[e._v("This spec does not specify an encoding; it thinks of lines as composed\nof [characters] rather than bytes.  A conforming parser may be limited\nto a certain encoding.")]),e._v(" "),n("p",[e._v("A "),n("a",{attrs:{href:"@"}},[e._v("line")]),e._v(" is a sequence of zero or more [characters]\nother than newline ("),n("code",[e._v("U+000A")]),e._v(") or carriage return ("),n("code",[e._v("U+000D")]),e._v("),\nfollowed by a [line ending] or by the end of file.")]),e._v(" "),n("p",[e._v("A "),n("a",{attrs:{href:"@"}},[e._v("line ending")]),e._v(" is a newline ("),n("code",[e._v("U+000A")]),e._v("), a carriage return\n("),n("code",[e._v("U+000D")]),e._v(") not followed by a newline, or a carriage return and a\nfollowing newline.")]),e._v(" "),n("p",[e._v("A line containing no characters, or a line containing only spaces\n("),n("code",[e._v("U+0020")]),e._v(") or tabs ("),n("code",[e._v("U+0009")]),e._v("), is called a "),n("a",{attrs:{href:"@"}},[e._v("blank line")]),e._v(".")]),e._v(" "),n("p",[e._v("The following definitions of character classes will be used in this spec:")]),e._v(" "),n("p",[e._v("A "),n("a",{attrs:{href:"@"}},[e._v("whitespace character")]),e._v(" is a space\n("),n("code",[e._v("U+0020")]),e._v("), tab ("),n("code",[e._v("U+0009")]),e._v("), newline ("),n("code",[e._v("U+000A")]),e._v("), line tabulation ("),n("code",[e._v("U+000B")]),e._v("),\nform feed ("),n("code",[e._v("U+000C")]),e._v("), or carriage return ("),n("code",[e._v("U+000D")]),e._v(").")]),e._v(" "),n("p",[n("a",{attrs:{href:"@"}},[e._v("Whitespace")]),e._v(" is a sequence of one or more [whitespace\ncharacters].")]),e._v(" "),n("p",[e._v("A "),n("a",{attrs:{href:"@"}},[e._v("Unicode whitespace character")]),e._v(" is\nany code point in the Unicode "),n("code",[e._v("Zs")]),e._v(" general category, or a tab ("),n("code",[e._v("U+0009")]),e._v("),\ncarriage return ("),n("code",[e._v("U+000D")]),e._v("), newline ("),n("code",[e._v("U+000A")]),e._v("), or form feed\n("),n("code",[e._v("U+000C")]),e._v(").")]),e._v(" "),n("p",[n("a",{attrs:{href:"@"}},[e._v("Unicode whitespace")]),e._v(" is a sequence of one\nor more [Unicode whitespace characters].")]),e._v(" "),n("p",[e._v("A "),n("a",{attrs:{href:"@"}},[e._v("space")]),e._v(" is "),n("code",[e._v("U+0020")]),e._v(".")]),e._v(" "),n("p",[e._v("A "),n("a",{attrs:{href:"@"}},[e._v("non-whitespace character")]),e._v(" is any character\nthat is not a [whitespace character].")]),e._v(" "),n("p",[e._v("An "),n("a",{attrs:{href:"@"}},[e._v("ASCII punctuation character")]),e._v("\nis "),n("code",[e._v("!")]),e._v(", "),n("code",[e._v('"')]),e._v(", "),n("code",[e._v("#")]),e._v(", "),n("code",[e._v("$")]),e._v(", "),n("code",[e._v("%")]),e._v(", "),n("code",[e._v("&")]),e._v(", "),n("code",[e._v("'")]),e._v(", "),n("code",[e._v("(")]),e._v(", "),n("code",[e._v(")")]),e._v(",\n"),n("code",[e._v("*")]),e._v(", "),n("code",[e._v("+")]),e._v(", "),n("code",[e._v(",")]),e._v(", "),n("code",[e._v("-")]),e._v(", "),n("code",[e._v(".")]),e._v(", "),n("code",[e._v("/")]),e._v(", "),n("code",[e._v(":")]),e._v(", "),n("code",[e._v(";")]),e._v(", "),n("code",[e._v("<")]),e._v(", "),n("code",[e._v("=")]),e._v(", "),n("code",[e._v(">")]),e._v(", "),n("code",[e._v("?")]),e._v(", "),n("code",[e._v("@")]),e._v(",\n"),n("code",[e._v("[")]),e._v(", "),n("code",[e._v("\\")]),e._v(", "),n("code",[e._v("]")]),e._v(", "),n("code",[e._v("^")]),e._v(", "),n("code",[e._v("_")]),e._v(", "),n("code",[e._v("`")]),e._v(", "),n("code",[e._v("{")]),e._v(", "),n("code",[e._v("|")]),e._v(", "),n("code",[e._v("}")]),e._v(", or "),n("code",[e._v("~")]),e._v(".")]),e._v(" "),n("p",[e._v("A "),n("a",{attrs:{href:"@"}},[e._v("punctuation character")]),e._v(" is an [ASCII\npunctuation character] or anything in\nthe general Unicode categories  "),n("code",[e._v("Pc")]),e._v(", "),n("code",[e._v("Pd")]),e._v(", "),n("code",[e._v("Pe")]),e._v(", "),n("code",[e._v("Pf")]),e._v(", "),n("code",[e._v("Pi")]),e._v(", "),n("code",[e._v("Po")]),e._v(", or "),n("code",[e._v("Ps")]),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"tabs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tabs","aria-hidden":"true"}},[e._v("#")]),e._v(" Tabs")]),e._v(" "),n("p",[e._v("Tabs in lines are not expanded to [spaces].  However,\nin contexts where whitespace helps to define block structure,\ntabs behave as if they were replaced by spaces with a tab stop\nof 4 characters.")]),e._v(" "),n("p",[e._v("Thus, for example, a tab can be used instead of four spaces\nin an indented code block.  (Note, however, that internal\ntabs are passed through as literal tabs, not expanded to\nspaces.)")]),e._v(" "),n("div",{staticClass:"language-example extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("→foo→baz→→bim\n.\n<pre><code>foo→baz→→bim\n</code></pre>\n")])])]),n("div",{staticClass:"language-example extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  →foo→baz→→bim\n.\n<pre><code>foo→baz→→bim\n</code></pre>\n")])])]),n("div",{staticClass:"language-example extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    a→a\n    ὐ→a\n.\n<pre><code>a→a\nὐ→a\n</code></pre>\n")])])]),n("p",[e._v("In the following example, a continuation paragraph of a list\nitem is indented with a tab; this has exactly the same effect\nas indentation with four spaces would:")]),e._v(" "),n("div",{staticClass:"language-example extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  - foo\n\n→bar\n.\n<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n")])])]),n("div",{staticClass:"language-example extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("- foo\n\n→→bar\n.\n<ul>\n<li>\n<p>foo</p>\n<pre><code>  bar\n</code></pre>\n</li>\n</ul>\n")])])]),n("p",[e._v("Normally the "),n("code",[e._v(">")]),e._v(" that begins a block quote may be followed\noptionally by a space, which is not considered part of the\ncontent.  In the following case "),n("code",[e._v(">")]),e._v(" is followed by a tab,\nwhich is treated as if it were expanded into three spaces.\nSince one of these spaces is considered part of the\ndelimiter, "),n("code",[e._v("foo")]),e._v(" is considered to be indented six spaces\ninside the block quote context, so we get an indented\ncode block starting with two spaces.")]),e._v(" "),n("div",{staticClass:"language-example extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(">→→foo\n.\n<blockquote>\n<pre><code>  foo\n</code></pre>\n</blockquote>\n")])])]),n("div",{staticClass:"language-example extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("-→→foo\n.\n<ul>\n<li>\n<pre><code>  foo\n</code></pre>\n</li>\n</ul>\n")])])]),n("div",{staticClass:"language-example extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    foo\n→bar\n.\n<pre><code>foo\nbar\n</code></pre>\n")])])]),n("div",{staticClass:"language-example extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" - foo\n   - bar\n→ - baz\n.\n<ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n")])])]),n("div",{staticClass:"language-example extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("#→Foo\n.\n<h1>Foo</h1>\n")])])]),n("div",{staticClass:"language-example extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("*→*→*→\n.\n<hr />\n")])])]),n("h2",{attrs:{id:"insecure-characters"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#insecure-characters","aria-hidden":"true"}},[e._v("#")]),e._v(" Insecure characters")]),e._v(" "),n("p",[e._v("For security reasons, the Unicode character "),n("code",[e._v("U+0000")]),e._v(" must be replaced\nwith the REPLACEMENT CHARACTER ("),n("code",[e._v("U+FFFD")]),e._v(").")])])}],!1,null,null,null);o.options.__file="2.Preliminaries.md";a.default=o.exports}}]);