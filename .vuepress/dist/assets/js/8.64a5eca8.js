(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{167:function(t,e,n){"use strict";n.r(e);var a=n(0),s=Object(a.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),n("p",[t._v("We define the syntax for container blocks recursively.  The general\nform of the definition is:")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),n("p",[t._v("The following rules define [block quotes]:")]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),n("p",[t._v("Here is a simple example:")]),t._v(" "),t._m(8),t._m(9),t._v(" "),t._m(10),t._m(11),t._v(" "),t._m(12),n("p",[t._v("Four spaces gives us a code block:")]),t._v(" "),t._m(13),t._m(14),t._v(" "),t._m(15),n("p",[t._v("A block quote can contain some lazy and some non-lazy\ncontinuation lines:")]),t._v(" "),t._m(16),t._m(17),t._v(" "),t._m(18),n("p",[t._v("without changing the meaning:")]),t._v(" "),t._m(19),t._m(20),t._v(" "),t._m(21),n("p",[t._v("then the block quote ends after the first line:")]),t._v(" "),t._m(22),t._m(23),t._v(" "),t._m(24),t._m(25),n("p",[t._v("Note that in the following case, we have a [lazy\ncontinuation line]:")]),t._v(" "),t._m(26),n("p",[t._v("To see why, note that in")]),t._v(" "),t._m(27),t._m(28),t._v(" "),n("p",[t._v("A block quote can be empty:")]),t._v(" "),t._m(29),t._m(30),n("p",[t._v("A block quote can have initial or final blank lines:")]),t._v(" "),t._m(31),n("p",[t._v("A blank line always separates block quotes:")]),t._v(" "),t._m(32),t._m(33),t._v(" "),n("p",[t._v("Consecutiveness means that if we put these block quotes together,\nwe get a single block quote:")]),t._v(" "),t._m(34),n("p",[t._v("To get a block quote with two paragraphs, use:")]),t._v(" "),t._m(35),n("p",[t._v("Block quotes can interrupt paragraphs:")]),t._v(" "),t._m(36),n("p",[t._v("In general, blank lines are not needed before or after block\nquotes:")]),t._v(" "),t._m(37),n("p",[t._v("However, because of laziness, a blank line is needed between\na block quote and a following paragraph:")]),t._v(" "),t._m(38),t._m(39),t._m(40),t._m(41),t._v(" "),t._m(42),t._m(43),t._m(44),t._v(" "),t._m(45),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),n("p",[t._v("The following rules define [list items]:")]),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._m(53),t._v(" "),t._m(54),n("p",[t._v("The most important thing to notice is that the position of\nthe text after the list marker determines how much indentation\nis needed in subsequent blocks in the list item.  If the list\nmarker takes up two spaces, and there are three spaces between\nthe list marker and the next [non-whitespace character], then blocks\nmust be indented five spaces in order to fall under the list\nitem.")]),t._v(" "),n("p",[t._v("Here are some examples showing how far content must be indented to be\nput under the list item:")]),t._v(" "),t._m(55),t._m(56),t._m(57),t._m(58),n("p",[t._v("It is tempting to think of this in terms of columns:  the continuation\nblocks must be indented at least to the column of the first\n[non-whitespace character] after the list marker. However, that is not quite right.\nThe spaces after the list marker determine how much relative indentation\nis needed.  Which column this indentation reaches will depend on\nhow the list item is embedded in other constructions, as shown by\nthis example:")]),t._v(" "),t._m(59),t._m(60),t._v(" "),t._m(61),t._v(" "),t._m(62),n("p",[t._v("Note that at least one space is needed between the list marker and\nany following content, so these are not list items:")]),t._v(" "),t._m(63),n("p",[t._v("A list item may contain blocks that are separated by more than\none blank line.")]),t._v(" "),t._m(64),n("p",[t._v("A list item may contain any kind of block:")]),t._v(" "),t._m(65),n("p",[t._v("A list item that contains an indented code block will preserve\nempty lines within the code block verbatim.")]),t._v(" "),t._m(66),n("p",[t._v("Note that ordered list start numbers must be nine digits or less:")]),t._v(" "),t._m(67),t._m(68),n("p",[t._v("A start number may begin with 0s:")]),t._v(" "),t._m(69),t._m(70),n("p",[t._v("A start number may not be negative:")]),t._v(" "),t._m(71),t._m(72),t._v(" "),n("p",[t._v("An indented code block will have to be indented four spaces beyond\nthe edge of the region where text will be included in the list item.\nIn the following case that is 6 spaces:")]),t._v(" "),t._m(73),n("p",[t._v("And in this case it is 11 spaces:")]),t._v(" "),t._m(74),t._m(75),t._v(" "),t._m(76),t._m(77),n("p",[t._v("Note that an additional space indent is interpreted as space\ninside the code block:")]),t._v(" "),t._m(78),n("p",[t._v("Note that rules #1 and #2 only apply to two cases:  (a) cases\nin which the lines to be included in a list item begin with a\n[non-whitespace character], and (b) cases in which\nthey begin with an indented code\nblock.  In a case like the following, where the first block begins with\na three-space indent, the rules do not allow us to form a list item by\nindenting the whole thing and prepending a list marker:")]),t._v(" "),t._m(79),t._m(80),n("p",[t._v("This is not a significant restriction, because when a block begins\nwith 1-3 spaces indent, the indentation can always be removed without\na change in interpretation, allowing rule #1 to be applied.  So, in\nthe above case:")]),t._v(" "),t._m(81),t._m(82),t._v(" "),n("p",[t._v("Here are some list items that start with a blank line but are not empty:")]),t._v(" "),t._m(83),n("p",[t._v("When the list item starts with a blank line, the number of spaces\nfollowing the list marker doesn't change the required indentation:")]),t._v(" "),t._m(84),t._m(85),t._v(" "),t._m(86),n("p",[t._v("Here is an empty bullet list item:")]),t._v(" "),t._m(87),n("p",[t._v("It does not matter whether there are spaces following the [list marker]:")]),t._v(" "),t._m(88),n("p",[t._v("Here is an empty ordered list item:")]),t._v(" "),t._m(89),n("p",[t._v("A list may start or end with an empty list item:")]),t._v(" "),t._m(90),n("p",[t._v("However, an empty list item cannot interrupt a paragraph:")]),t._v(" "),t._m(91),t._m(92),t._v(" "),n("p",[t._v("Indented one space:")]),t._v(" "),t._m(93),n("p",[t._v("Indented two spaces:")]),t._v(" "),t._m(94),n("p",[t._v("Indented three spaces:")]),t._v(" "),t._m(95),n("p",[t._v("Four spaces indent gives a code block:")]),t._v(" "),t._m(96),t._m(97),t._v(" "),n("p",[t._v("Here is an example with [lazy continuation lines]:")]),t._v(" "),t._m(98),n("p",[t._v("Indentation can be partially deleted:")]),t._v(" "),t._m(99),n("p",[t._v("These examples show how laziness can work in nested structures:")]),t._v(" "),t._m(100),t._m(101),t._m(102),t._v(" "),n("p",[t._v("The rules for sublists follow from the general rules\n[above][List items].  A sublist must be indented the same number\nof spaces a paragraph would need to be in order to be included\nin the list item.")]),t._v(" "),n("p",[t._v("So, in this case we need two spaces indent:")]),t._v(" "),t._m(103),n("p",[t._v("One is not enough:")]),t._v(" "),t._m(104),n("p",[t._v("Here we need four, because the list marker is wider:")]),t._v(" "),t._m(105),n("p",[t._v("Three is not enough:")]),t._v(" "),t._m(106),n("p",[t._v("A list may be the first block in a list item:")]),t._v(" "),t._m(107),t._m(108),n("p",[t._v("A list item can contain a heading:")]),t._v(" "),t._m(109),t._m(110),t._v(" "),n("p",[t._v("John Gruber's Markdown spec says the following about list items:")]),t._v(" "),t._m(111),t._v(" "),t._m(112),t._v(" "),t._m(113),t._v(" "),t._m(114),t._v(" "),n("p",[t._v("The strategy here is to let the width and indentation of the list marker\ndetermine the indentation necessary for blocks to fall under the list\nitem, rather than having a fixed and arbitrary number.  The writer can\nthink of the body of the list item as a unit which gets indented to the\nright enough to fit the list marker (and any indentation on the list\nmarker).  (The laziness rule, #5, then allows continuation lines to be\nunindented if needed.)")]),t._v(" "),n("p",[t._v("This rule is superior, we claim, to any rule requiring a fixed level of\nindentation from the margin.  The four-space rule is clear but\nunnatural. It is quite unintuitive that")]),t._v(" "),t._m(115),n("p",[t._v("should be parsed as two lists with an intervening paragraph,")]),t._v(" "),t._m(116),n("p",[t._v("as the four-space rule demands, rather than a single list,")]),t._v(" "),t._m(117),n("p",[t._v("The choice of four spaces is arbitrary.  It can be learned, but it is\nnot likely to be guessed, and it trips up beginners regularly.")]),t._v(" "),t._m(118),t._v(" "),t._m(119),t._m(120),t._v(" "),t._m(121),n("p",[t._v("and similarly")]),t._v(" "),t._m(122),n("p",[t._v("as")]),t._v(" "),t._m(123),n("p",[t._v("This is extremely unintuitive.")]),t._v(" "),t._m(124),t._v(" "),t._m(125),t._m(126),t._v(" "),t._m(127),t._m(128),t._v(" "),t._m(129),t._v(" "),t._m(130),t._v(" "),t._m(131),t._v(" "),t._m(132),t._v(" "),t._m(133),t._v(" "),t._m(134),t._v(" "),t._m(135),t._v(" "),n("p",[t._v("Changing the bullet or ordered list delimiter starts a new list:")]),t._v(" "),t._m(136),t._m(137),n("p",[t._v("In CommonMark, a list can interrupt a paragraph. That is,\nno blank line is needed to separate a paragraph from a following\nlist:")]),t._v(" "),t._m(138),t._m(139),t._v(" "),t._m(140),t._m(141),t._v(" "),n("p",[t._v("In CommonMark, we do allow lists to interrupt paragraphs, for\ntwo reasons.  First, it is natural and not uncommon for people\nto start lists without blank lines:")]),t._v(" "),t._m(142),n("p",[t._v("Second, we are attracted to a")]),t._v(" "),t._m(143),t._v(" "),n("p",[t._v("(Indeed, the spec for [list items] and [block quotes] presupposes\nthis principle.) This principle implies that if")]),t._v(" "),t._m(144),t._m(145),t._v(" "),t._m(146),n("p",[t._v("by itself should be a paragraph followed by a nested sublist.")]),t._v(" "),n("p",[t._v("Since it is well established Markdown practice to allow lists to\ninterrupt paragraphs inside list items, the [principle of\nuniformity] requires us to allow this outside list items as\nwell.  ("),n("a",{attrs:{href:"http://docutils.sourceforge.net/rst.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("reStructuredText"),n("OutboundLink")],1),t._v("\ntakes a different approach, requiring blank lines before lists\neven inside other list items.)")]),t._v(" "),t._m(147),t._v(" "),t._m(148),n("p",[t._v("We may still get an unintended result in cases like")]),t._v(" "),t._m(149),n("p",[t._v("but this rule should prevent most spurious list captures.")]),t._v(" "),n("p",[t._v("There can be any number of blank lines between items:")]),t._v(" "),t._m(150),t._m(151),n("p",[t._v("To separate consecutive lists of the same type, or to separate a\nlist from an indented code block that would otherwise be parsed\nas a subparagraph of the final list item, you can insert a blank HTML\ncomment:")]),t._v(" "),t._m(152),t._m(153),n("p",[t._v("List items need not be indented to the same level.  The following\nlist items will be treated as items at the same list level,\nsince none is indented enough to belong to the previous list\nitem:")]),t._v(" "),t._m(154),t._m(155),t._m(156),t._v(" "),t._m(157),t._m(158),t._v(" "),t._m(159),n("p",[t._v("This is a loose list, because there is a blank line between\ntwo of the list items:")]),t._v(" "),t._m(160),n("p",[t._v("So is this, with a empty second item:")]),t._v(" "),t._m(161),n("p",[t._v("These are loose lists, even though there is no space between the items,\nbecause one of the items directly contains two block-level elements\nwith a blank line between them:")]),t._v(" "),t._m(162),t._m(163),n("p",[t._v("This is a tight list, because the blank lines are in a code block:")]),t._v(" "),t._m(164),n("p",[t._v("This is a tight list, because the blank line is between two\nparagraphs of a sublist.  So the sublist is loose while\nthe outer list is tight:")]),t._v(" "),t._m(165),n("p",[t._v("This is a tight list, because the blank line is inside the\nblock quote:")]),t._v(" "),t._m(166),n("p",[t._v("This list is tight, because the consecutive block elements\nare not separated by blank lines:")]),t._v(" "),t._m(167),n("p",[t._v("A single-paragraph list is tight:")]),t._v(" "),t._m(168),t._m(169),n("p",[t._v("This list is loose, because of the blank line between the\ntwo block elements in the list item:")]),t._v(" "),t._m(170),n("p",[t._v("Here the outer list is loose, the inner list tight:")]),t._v(" "),t._m(171),t._m(172)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"container-blocks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#container-blocks","aria-hidden":"true"}},[this._v("#")]),this._v(" Container blocks")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("A "),e("a",{attrs:{href:"#container-blocks"}},[this._v("container block")]),this._v(" is a block that has other\nblocks as its contents.  There are two basic kinds of container blocks:\n[block quotes] and [list items].\n[Lists] are meta-containers for [list items].")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("If X is a sequence of blocks, then the result of\ntransforming X in such-and-such a way is a container of type Y\nwith these blocks as its content.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("So, we explain what counts as a block quote or list item by explaining\nhow these can be "),e("em",[this._v("generated")]),this._v(" from their contents. This should suffice\nto define the syntax, although it does not give a recipe for "),e("em",[this._v("parsing")]),this._v("\nthese constructions.  (A recipe is provided below in the section entitled\n"),e("a",{attrs:{href:"#appendix-a-parsing-strategy"}},[this._v("A parsing strategy")]),this._v(".)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"block-quotes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#block-quotes","aria-hidden":"true"}},[this._v("#")]),this._v(" Block quotes")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("A "),e("a",{attrs:{href:"@"}},[this._v("block quote marker")]),this._v("\nconsists of 0-3 spaces of initial indent, plus (a) the character "),e("code",[this._v(">")]),this._v(" together\nwith a following space, or (b) a single character "),e("code",[this._v(">")]),this._v(" not followed by a space.")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ol",[n("li",[n("p",[n("strong",[t._v("Basic case.")]),t._v("  If a string of lines "),n("em",[t._v("Ls")]),t._v(" constitute a sequence\nof blocks "),n("em",[t._v("Bs")]),t._v(", then the result of prepending a [block quote\nmarker] to the beginning of each line in "),n("em",[t._v("Ls")]),t._v("\nis a "),n("a",{attrs:{href:"#block-quotes"}},[t._v("block quote")]),t._v(" containing "),n("em",[t._v("Bs")]),t._v(".")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("Laziness.")]),t._v("  If a string of lines "),n("em",[t._v("Ls")]),t._v(" constitute a "),n("a",{attrs:{href:"#block-quotes"}},[t._v("block\nquote")]),t._v(" with contents "),n("em",[t._v("Bs")]),t._v(", then the result of deleting\nthe initial [block quote marker] from one or\nmore lines in which the next [non-whitespace character] after the [block\nquote marker] is [paragraph continuation\ntext] is a block quote with "),n("em",[t._v("Bs")]),t._v(" as its content.\n"),n("a",{attrs:{href:"@"}},[t._v("Paragraph continuation text")]),t._v(" is text\nthat will be parsed as part of the content of a paragraph, but does\nnot occur at the beginning of the paragraph.")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("Consecutiveness.")]),t._v("  A document cannot contain two [block\nquotes] in a row unless there is a [blank line] between them.")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Nothing else counts as a "),e("a",{attrs:{href:"#block-quotes"}},[this._v("block quote")]),this._v(".")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("> # Foo\n> bar\n> baz\n.\n<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The spaces after the "),e("code",[this._v(">")]),this._v(" characters can be omitted:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("># Foo\n>bar\n> baz\n.\n<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The "),e("code",[this._v(">")]),this._v(" characters can be indented 1-3 spaces:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("   > # Foo\n   > bar\n > baz\n.\n<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("    > # Foo\n    > bar\n    > baz\n.\n<pre><code>&gt; # Foo\n&gt; bar\n&gt; baz\n</code></pre>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The Laziness clause allows us to omit the "),e("code",[this._v(">")]),this._v(" before\n[paragraph continuation text]:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("> # Foo\n> bar\nbaz\n.\n<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("> bar\nbaz\n> foo\n.\n<blockquote>\n<p>bar\nbaz\nfoo</p>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Laziness only applies to lines that would have been continuations of\nparagraphs had they been prepended with [block quote markers].\nFor example, the "),e("code",[this._v(">")]),this._v(" cannot be omitted in the second line of")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-markdown extra-class"},[e("pre",{pre:!0,attrs:{class:"language-markdown"}},[e("code",[e("span",{attrs:{class:"token blockquote punctuation"}},[this._v(">")]),this._v(" foo\n"),e("span",{attrs:{class:"token blockquote punctuation"}},[this._v(">")]),this._v(" "),e("span",{attrs:{class:"token hr punctuation"}},[this._v("---")]),this._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("> foo\n---\n.\n<blockquote>\n<p>foo</p>\n</blockquote>\n<hr />\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Similarly, if we omit the "),e("code",[this._v(">")]),this._v(" in the second line of")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-markdown extra-class"},[n("pre",{pre:!0,attrs:{class:"language-markdown"}},[n("code",[n("span",{attrs:{class:"token blockquote punctuation"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token list punctuation"}},[t._v("-")]),t._v(" foo\n"),n("span",{attrs:{class:"token blockquote punctuation"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token list punctuation"}},[t._v("-")]),t._v(" bar\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("> - foo\n- bar\n.\n<blockquote>\n<ul>\n<li>foo</li>\n</ul>\n</blockquote>\n<ul>\n<li>bar</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("For the same reason, we can't omit the "),e("code",[this._v(">")]),this._v(" in front of\nsubsequent lines of an indented or fenced code block:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v(">     foo\n    bar\n.\n<blockquote>\n<pre><code>foo\n</code></pre>\n</blockquote>\n<pre><code>bar\n</code></pre>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("> ```\nfoo\n```\n.\n<blockquote>\n<pre><code></code></pre>\n</blockquote>\n<p>foo</p>\n<pre><code></code></pre>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("> foo\n    - bar\n.\n<blockquote>\n<p>foo\n- bar</p>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-markdown extra-class"},[e("pre",{pre:!0,attrs:{class:"language-markdown"}},[e("code",[e("span",{attrs:{class:"token blockquote punctuation"}},[this._v(">")]),this._v(" foo\n"),e("span",{attrs:{class:"token blockquote punctuation"}},[this._v(">")]),e("span",{attrs:{class:"token code keyword"}},[this._v("     - bar")]),this._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("the "),e("code",[this._v("- bar")]),this._v(" is indented too far to start a list, and can't\nbe an indented code block because indented code blocks cannot\ninterrupt paragraphs, so it is [paragraph continuation text].")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v(">\n.\n<blockquote>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v(">\n>  \n> \n.\n<blockquote>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v(">\n> foo\n>  \n.\n<blockquote>\n<p>foo</p>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("> foo\n\n> bar\n.\n<blockquote>\n<p>foo</p>\n</blockquote>\n<blockquote>\n<p>bar</p>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("(Most current Markdown implementations, including John Gruber's\noriginal "),e("code",[this._v("Markdown.pl")]),this._v(", will parse this example as a single block quote\nwith two paragraphs.  But it seems better to allow the author to decide\nwhether two block quotes or one are wanted.)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("> foo\n> bar\n.\n<blockquote>\n<p>foo\nbar</p>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("> foo\n>\n> bar\n.\n<blockquote>\n<p>foo</p>\n<p>bar</p>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("foo\n> bar\n.\n<p>foo</p>\n<blockquote>\n<p>bar</p>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("> aaa\n***\n> bbb\n.\n<blockquote>\n<p>aaa</p>\n</blockquote>\n<hr />\n<blockquote>\n<p>bbb</p>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("> bar\nbaz\n.\n<blockquote>\n<p>bar\nbaz</p>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("> bar\n\nbaz\n.\n<blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("> bar\n>\nbaz\n.\n<blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("It is a consequence of the Laziness rule that any number\nof initial "),e("code",[this._v(">")]),this._v("s may be omitted on a continuation line of a\nnested block quote:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("> > > foo\nbar\n.\n<blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar</p>\n</blockquote>\n</blockquote>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v(">>> foo\n> bar\n>>baz\n.\n<blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar\nbaz</p>\n</blockquote>\n</blockquote>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("When including an indented code block in a block quote,\nremember that the [block quote marker] includes\nboth the "),e("code",[this._v(">")]),this._v(" and a following space.  So "),e("em",[this._v("five spaces")]),this._v(" are needed after\nthe "),e("code",[this._v(">")]),this._v(":")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v(">     code\n\n>    not code\n.\n<blockquote>\n<pre><code>code\n</code></pre>\n</blockquote>\n<blockquote>\n<p>not code</p>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"list-items"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list-items","aria-hidden":"true"}},[this._v("#")]),this._v(" List items")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("A "),e("a",{attrs:{href:"@"}},[this._v("list marker")]),this._v(" is a\n[bullet list marker] or an [ordered list marker].")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("A "),n("a",{attrs:{href:"@"}},[t._v("bullet list marker")]),t._v("\nis a "),n("code",[t._v("-")]),t._v(", "),n("code",[t._v("+")]),t._v(", or "),n("code",[t._v("*")]),t._v(" character.")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("An "),n("a",{attrs:{href:"@"}},[t._v("ordered list marker")]),t._v("\nis a sequence of 1--9 arabic digits ("),n("code",[t._v("0-9")]),t._v("), followed by either a\n"),n("code",[t._v(".")]),t._v(" character or a "),n("code",[t._v(")")]),t._v(" character.  (The reason for the length\nlimit is that with 10 digits we start seeing integer overflows\nin some browsers.)")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ol",[n("li",[n("p",[n("strong",[t._v("Basic case.")]),t._v("  If a sequence of lines "),n("em",[t._v("Ls")]),t._v(" constitute a sequence of\nblocks "),n("em",[t._v("Bs")]),t._v(" starting with a [non-whitespace character] and not separated\nfrom each other by more than one blank line, and "),n("em",[t._v("M")]),t._v(" is a list\nmarker of width "),n("em",[t._v("W")]),t._v(" followed by 1 ≤ "),n("em",[t._v("N")]),t._v(" ≤ 4 spaces, then the result\nof prepending "),n("em",[t._v("M")]),t._v(" and the following spaces to the first line of\n"),n("em",[t._v("Ls")]),t._v(", and indenting subsequent lines of "),n("em",[t._v("Ls")]),t._v(" by "),n("em",[t._v("W + N")]),t._v(" spaces, is a\nlist item with "),n("em",[t._v("Bs")]),t._v(" as its contents.  The type of the list item\n(bullet or ordered) is determined by the type of its list marker.\nIf the list item is ordered, then it is also assigned a start\nnumber, based on the ordered list marker.")]),t._v(" "),n("p",[t._v("Exceptions:")]),t._v(" "),n("ol",[n("li",[t._v("When the first list item in a [list] interrupts\na paragraph---that is, when it starts on a line that would\notherwise count as [paragraph continuation text]---then (a)\nthe lines "),n("em",[t._v("Ls")]),t._v(" must not begin with a blank line, and (b) if\nthe list item is ordered, the start number must be 1.")]),t._v(" "),n("li",[t._v("If any line is a [thematic break][thematic breaks] then\nthat line is not a list item.")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("For example, let "),e("em",[this._v("Ls")]),this._v(" be the lines")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("A paragraph\nwith two lines.\n\n    indented code\n\n> A block quote.\n.\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("And let "),n("em",[t._v("M")]),t._v(" be the marker "),n("code",[t._v("1.")]),t._v(", and "),n("em",[t._v("N")]),t._v(" = 2.  Then rule #1 says\nthat the following is an ordered list item with start number 1,\nand the same contents as "),n("em",[t._v("Ls")]),t._v(":")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("1.  A paragraph\n    with two lines.\n\n        indented code\n\n    > A block quote.\n.\n<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- one\n\n two\n.\n<ul>\n<li>one</li>\n</ul>\n<p>two</p>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- one\n\n  two\n.\n<ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v(" -    one\n\n     two\n.\n<ul>\n<li>one</li>\n</ul>\n<pre><code> two\n</code></pre>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v(" -    one\n\n      two\n.\n<ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("   > > 1.  one\n>>\n>>     two\n.\n<blockquote>\n<blockquote>\n<ol>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ol>\n</blockquote>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Here "),e("code",[this._v("two")]),this._v(" occurs in the same column as the list marker "),e("code",[this._v("1.")]),this._v(",\nbut is actually contained in the list item, because there is\nsufficient indentation after the last containing blockquote marker.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The converse is also possible.  In the following example, the word "),e("code",[this._v("two")]),this._v("\noccurs far to the right of the initial text of the list item, "),e("code",[this._v("one")]),this._v(", but\nit is not considered part of the list item, because it is not indented\nfar enough past the blockquote marker:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v(">>- one\n>>\n  >  > two\n.\n<blockquote>\n<blockquote>\n<ul>\n<li>one</li>\n</ul>\n<p>two</p>\n</blockquote>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("-one\n\n2.two\n.\n<p>-one</p>\n<p>2.two</p>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- foo\n\n\n  bar\n.\n<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("1.  foo\n\n    ```\n    bar\n    ```\n\n    baz\n\n    > bam\n.\n<ol>\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n<p>baz</p>\n<blockquote>\n<p>bam</p>\n</blockquote>\n</li>\n</ol>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- Foo\n\n      bar\n\n\n      baz\n.\n<ul>\n<li>\n<p>Foo</p>\n<pre><code>bar\n\n\nbaz\n</code></pre>\n</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('123456789. ok\n.\n<ol start="123456789">\n<li>ok</li>\n</ol>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("1234567890. not ok\n.\n<p>1234567890. not ok</p>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('0. ok\n.\n<ol start="0">\n<li>ok</li>\n</ol>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('003. ok\n.\n<ol start="3">\n<li>ok</li>\n</ol>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("-1. not ok\n.\n<p>-1. not ok</p>\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ol",{attrs:{start:"2"}},[n("li",[n("strong",[t._v("Item starting with indented code.")]),t._v("  If a sequence of lines "),n("em",[t._v("Ls")]),t._v("\nconstitute a sequence of blocks "),n("em",[t._v("Bs")]),t._v(" starting with an indented code\nblock and not separated from each other by more than one blank line,\nand "),n("em",[t._v("M")]),t._v(" is a list marker of width "),n("em",[t._v("W")]),t._v(" followed by\none space, then the result of prepending "),n("em",[t._v("M")]),t._v(" and the following\nspace to the first line of "),n("em",[t._v("Ls")]),t._v(", and indenting subsequent lines of\n"),n("em",[t._v("Ls")]),t._v(" by "),n("em",[t._v("W + 1")]),t._v(" spaces, is a list item with "),n("em",[t._v("Bs")]),t._v(" as its contents.\nIf a line is empty, then it need not be indented.  The type of the\nlist item (bullet or ordered) is determined by the type of its list\nmarker.  If the list item is ordered, then it is also assigned a\nstart number, based on the ordered list marker.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- foo\n\n      bar\n.\n<ul>\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('  10.  foo\n\n           bar\n.\n<ol start="10">\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n</li>\n</ol>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("If the "),e("em",[this._v("first")]),this._v(" block in the list item is an indented code block,\nthen by rule #2, the contents must be indented "),e("em",[this._v("one")]),this._v(" space after the\nlist marker:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("    indented code\n\nparagraph\n\n    more code\n.\n<pre><code>indented code\n</code></pre>\n<p>paragraph</p>\n<pre><code>more code\n</code></pre>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("1.     indented code\n\n   paragraph\n\n       more code\n.\n<ol>\n<li>\n<pre><code>indented code\n</code></pre>\n<p>paragraph</p>\n<pre><code>more code\n</code></pre>\n</li>\n</ol>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("1.      indented code\n\n   paragraph\n\n       more code\n.\n<ol>\n<li>\n<pre><code> indented code\n</code></pre>\n<p>paragraph</p>\n<pre><code>more code\n</code></pre>\n</li>\n</ol>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("   foo\n\nbar\n.\n<p>foo</p>\n<p>bar</p>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("-    foo\n\n  bar\n.\n<ul>\n<li>foo</li>\n</ul>\n<p>bar</p>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("-  foo\n\n   bar\n.\n<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ol",{attrs:{start:"3"}},[n("li",[n("strong",[t._v("Item starting with a blank line.")]),t._v("  If a sequence of lines "),n("em",[t._v("Ls")]),t._v("\nstarting with a single [blank line] constitute a (possibly empty)\nsequence of blocks "),n("em",[t._v("Bs")]),t._v(", not separated from each other by more than\none blank line, and "),n("em",[t._v("M")]),t._v(" is a list marker of width "),n("em",[t._v("W")]),t._v(",\nthen the result of prepending "),n("em",[t._v("M")]),t._v(" to the first line of "),n("em",[t._v("Ls")]),t._v(", and\nindenting subsequent lines of "),n("em",[t._v("Ls")]),t._v(" by "),n("em",[t._v("W + 1")]),t._v(" spaces, is a list\nitem with "),n("em",[t._v("Bs")]),t._v(" as its contents.\nIf a line is empty, then it need not be indented.  The type of the\nlist item (bullet or ordered) is determined by the type of its list\nmarker.  If the list item is ordered, then it is also assigned a\nstart number, based on the ordered list marker.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("-\n  foo\n-\n  ```\n  bar\n  ```\n-\n      baz\n.\n<ul>\n<li>foo</li>\n<li>\n<pre><code>bar\n</code></pre>\n</li>\n<li>\n<pre><code>baz\n</code></pre>\n</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("-   \n  foo\n.\n<ul>\n<li>foo</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("A list item can begin with at most one blank line.\nIn the following example, "),e("code",[this._v("foo")]),this._v(" is not part of the list\nitem:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("-\n\n  foo\n.\n<ul>\n<li></li>\n</ul>\n<p>foo</p>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- foo\n-\n- bar\n.\n<ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- foo\n-   \n- bar\n.\n<ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("1. foo\n2.\n3. bar\n.\n<ol>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ol>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("*\n.\n<ul>\n<li></li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("foo\n*\n\nfoo\n1.\n.\n<p>foo\n*</p>\n<p>foo\n1.</p>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"4"}},[e("li",[e("strong",[this._v("Indentation.")]),this._v("  If a sequence of lines "),e("em",[this._v("Ls")]),this._v(" constitutes a list item\naccording to rule #1, #2, or #3, then the result of indenting each line\nof "),e("em",[this._v("Ls")]),this._v(" by 1-3 spaces (the same for each line) also constitutes a\nlist item with the same contents and attributes.  If a line is\nempty, then it need not be indented.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v(" 1.  A paragraph\n     with two lines.\n\n         indented code\n\n     > A block quote.\n.\n<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("  1.  A paragraph\n      with two lines.\n\n          indented code\n\n      > A block quote.\n.\n<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("   1.  A paragraph\n       with two lines.\n\n           indented code\n\n       > A block quote.\n.\n<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("    1.  A paragraph\n        with two lines.\n\n            indented code\n\n        > A block quote.\n.\n<pre><code>1.  A paragraph\n    with two lines.\n\n        indented code\n\n    &gt; A block quote.\n</code></pre>\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ol",{attrs:{start:"5"}},[n("li",[n("strong",[t._v("Laziness.")]),t._v("  If a string of lines "),n("em",[t._v("Ls")]),t._v(" constitute a "),n("a",{attrs:{href:"#list-items"}},[t._v("list\nitem")]),t._v(" with contents "),n("em",[t._v("Bs")]),t._v(", then the result of deleting\nsome or all of the indentation from one or more lines in which the\nnext [non-whitespace character] after the indentation is\n[paragraph continuation text] is a\nlist item with the same contents and attributes.  The unindented\nlines are called\n"),n("a",{attrs:{href:"@"}},[t._v("lazy continuation line")]),t._v("s.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("  1.  A paragraph\nwith two lines.\n\n          indented code\n\n      > A block quote.\n.\n<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("  1.  A paragraph\n    with two lines.\n.\n<ol>\n<li>A paragraph\nwith two lines.</li>\n</ol>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("> 1. > Blockquote\ncontinued here.\n.\n<blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("> 1. > Blockquote\n> continued here.\n.\n<blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"6"}},[e("li",[e("strong",[this._v("That's all.")]),this._v(" Nothing that is not counted as a list item by rules\n#1--5 counts as a "),e("a",{attrs:{href:"#list-items"}},[this._v("list item")]),this._v(".")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- foo\n  - bar\n    - baz\n      - boo\n.\n<ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz\n<ul>\n<li>boo</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- foo\n - bar\n  - baz\n   - boo\n.\n<ul>\n<li>foo</li>\n<li>bar</li>\n<li>baz</li>\n<li>boo</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('10) foo\n    - bar\n.\n<ol start="10">\n<li>foo\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('10) foo\n   - bar\n.\n<ol start="10">\n<li>foo</li>\n</ol>\n<ul>\n<li>bar</li>\n</ul>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- - foo\n.\n<ul>\n<li>\n<ul>\n<li>foo</li>\n</ul>\n</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('1. - 2. foo\n.\n<ol>\n<li>\n<ul>\n<li>\n<ol start="2">\n<li>foo</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- # Foo\n- Bar\n  ---\n  baz\n.\n<ul>\n<li>\n<h1>Foo</h1>\n</li>\n<li>\n<h2>Bar</h2>\nbaz</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"motivation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#motivation","aria-hidden":"true"}},[this._v("#")]),this._v(" Motivation")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ol",[n("li",[n("p",[t._v('"List markers typically start at the left margin, but may be indented\nby up to three spaces. List markers must be followed by one or more\nspaces or a tab."')])]),t._v(" "),n("li",[n("p",[t._v("\"To make lists look nice, you can wrap items with hanging indents....\nBut if you don't want to, you don't have to.\"")])]),t._v(" "),n("li",[n("p",[t._v('"List items may consist of multiple paragraphs. Each subsequent\nparagraph in a list item must be indented by either 4 spaces or one\ntab."')])]),t._v(" "),n("li",[n("p",[t._v('"It looks nice if you indent every line of the subsequent paragraphs,\nbut here again, Markdown will allow you to be lazy."')])]),t._v(" "),n("li",[n("p",[t._v("\"To put a blockquote within a list item, the blockquote's "),n("code",[t._v(">")]),t._v('\ndelimiters need to be indented."')])]),t._v(" "),n("li",[n("p",[t._v('"To put a code block within a list item, the code block needs to be\nindented twice — 8 spaces or two tabs."')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("These rules specify that a paragraph under a list item must be indented\nfour spaces (presumably, from the left margin, rather than the start of\nthe list marker, but this is not said), and that code under a list item\nmust be indented eight spaces instead of the usual four.  They also say\nthat a block quote must be indented, but not by how much; however, the\nexample given has four spaces indentation.  Although nothing is said\nabout other kinds of block-level content, it is certainly reasonable to\ninfer that "),e("em",[this._v("all")]),this._v(" block elements under a list item, including other\nlists, must be indented four spaces.  This principle has been called the\n"),e("em",[this._v("four-space rule")]),this._v(".")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The four-space rule is clear and principled, and if the reference\nimplementation "),e("code",[this._v("Markdown.pl")]),this._v(" had followed it, it probably would have\nbecome the standard.  However, "),e("code",[this._v("Markdown.pl")]),this._v(" allowed paragraphs and\nsublists to start with only two spaces indentation, at least on the\nouter level.  Worse, its behavior was inconsistent: a sublist of an\nouter-level list needed two spaces indentation, but a sublist of this\nsublist needed three spaces.  It is not surprising, then, that different\nimplementations of Markdown have developed very different rules for\ndetermining what comes under a list item.  (Pandoc and python-Markdown,\nfor example, stuck with Gruber's syntax description and the four-space\nrule, while discount, redcarpet, marked, PHP Markdown, and others\nfollowed "),e("code",[this._v("Markdown.pl")]),this._v("'s behavior more closely.)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Unfortunately, given the divergences between implementations, there\nis no way to give a spec for list items that will be guaranteed not\nto break any existing documents.  However, the spec given here should\ncorrectly handle lists formatted with either the four-space rule or\nthe more forgiving "),e("code",[this._v("Markdown.pl")]),this._v(" behavior, provided they are laid out\nin a way that is natural for a human to read.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-markdown extra-class"},[e("pre",{pre:!0,attrs:{class:"language-markdown"}},[e("code",[e("span",{attrs:{class:"token list punctuation"}},[this._v("-")]),this._v(" foo\n\n  bar\n\n  "),e("span",{attrs:{class:"token list punctuation"}},[this._v("-")]),this._v(" baz\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("foo"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("bar"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("baz"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("foo"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("bar"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("baz"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Would it help to adopt a two-space rule?  The problem is that such\na rule, together with the rule allowing 1--3 spaces indentation of the\ninitial list marker, allows text that is indented "),e("em",[this._v("less than")]),this._v(" the\noriginal list marker to be included in the list item. For example,\n"),e("code",[this._v("Markdown.pl")]),this._v(" parses")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-markdown extra-class"},[e("pre",{pre:!0,attrs:{class:"language-markdown"}},[e("code",[this._v("   "),e("span",{attrs:{class:"token list punctuation"}},[this._v("-")]),this._v(" one\n\n  two\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("as a single list item, with "),e("code",[this._v("two")]),this._v(" a continuation paragraph:")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("one"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("two"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-markdown extra-class"},[n("pre",{pre:!0,attrs:{class:"language-markdown"}},[n("code",[n("span",{attrs:{class:"token blockquote punctuation"}},[t._v(">")]),t._v("   "),n("span",{attrs:{class:"token list punctuation"}},[t._v("-")]),t._v(" one\n"),n("span",{attrs:{class:"token blockquote punctuation"}},[t._v(">")]),t._v("\n"),n("span",{attrs:{class:"token blockquote punctuation"}},[t._v(">")]),t._v("  two\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("blockquote")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("one"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("two"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("blockquote")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Rather than requiring a fixed indent from the margin, we could require\na fixed indent (say, two spaces, or even one space) from the list marker (which\nmay itself be indented).  This proposal would remove the last anomaly\ndiscussed.  Unlike the spec presented above, it would count the following\nas a list item with a subparagraph, even though the paragraph "),e("code",[this._v("bar")]),this._v("\nis not indented as far as the first paragraph "),e("code",[this._v("foo")]),this._v(":")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-markdown extra-class"},[e("pre",{pre:!0,attrs:{class:"language-markdown"}},[e("code",[this._v(" "),e("span",{attrs:{class:"token list punctuation"}},[this._v("10.")]),this._v(" foo\n\n   bar  \n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Arguably this text does read like a list item with "),e("code",[this._v("bar")]),this._v(" as a subparagraph,\nwhich may count in favor of the proposal.  However, on this proposal indented\ncode would have to be indented six spaces after the list marker.  And this\nwould break a lot of existing Markdown, which has the pattern:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-markdown extra-class"},[e("pre",{pre:!0,attrs:{class:"language-markdown"}},[e("code",[e("span",{attrs:{class:"token list punctuation"}},[this._v("1.")]),this._v("  foo\n\n"),e("span",{attrs:{class:"token code keyword"}},[this._v("        indented code")]),this._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("where the code is indented eight spaces.  The spec above, by contrast, will\nparse this text as expected, since the code block's indentation is measured\nfrom the beginning of "),e("code",[this._v("foo")]),this._v(".")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The one case that needs special treatment is a list item that "),e("em",[this._v("starts")]),this._v('\nwith indented code.  How much indentation is required in that case, since\nwe don\'t have a "first paragraph" to measure from?  Rule #2 simply stipulates\nthat in such cases, we require one space indentation from the list marker\n(and then the normal four spaces for the indented code).  This will match the\nfour-space rule in cases where the list marker plus its initial indentation\ntakes four spaces (a common case), but diverge in other cases.')])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"lists"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lists","aria-hidden":"true"}},[this._v("#")]),this._v(" Lists")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("A "),e("a",{attrs:{href:"@"}},[this._v("list")]),this._v(" is a sequence of one or more\nlist items [of the same type].  The list items\nmay be separated by any number of blank lines.")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("Two list items are "),n("a",{attrs:{href:"@"}},[t._v("of the same type")]),t._v("\nif they begin with a [list marker] of the same type.\nTwo list markers are of the\nsame type if (a) they are bullet list markers using the same character\n("),n("code",[t._v("-")]),t._v(", "),n("code",[t._v("+")]),t._v(", or "),n("code",[t._v("*")]),t._v(") or (b) they are ordered list numbers with the same\ndelimiter (either "),n("code",[t._v(".")]),t._v(" or "),n("code",[t._v(")")]),t._v(").")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("A list is an "),e("a",{attrs:{href:"@"}},[this._v("ordered list")]),this._v("\nif its constituent list items begin with\n[ordered list markers], and a\n"),e("a",{attrs:{href:"@"}},[this._v("bullet list")]),this._v(" if its constituent list\nitems begin with [bullet list markers].")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The "),e("a",{attrs:{href:"@"}},[this._v("start number")]),this._v("\nof an [ordered list] is determined by the list number of\nits initial list item.  The numbers of subsequent list items are\ndisregarded.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("A list is "),e("a",{attrs:{href:"@"}},[this._v("loose")]),this._v(" if any of its constituent\nlist items are separated by blank lines, or if any of its constituent\nlist items directly contain two block-level elements with a blank line\nbetween them.  Otherwise a list is "),e("a",{attrs:{href:"@"}},[this._v("tight")]),this._v(".\n(The difference in HTML output is that paragraphs in a loose list are\nwrapped in "),e("code",[this._v("<p>")]),this._v(" tags, while paragraphs in a tight list are not.)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- foo\n- bar\n+ baz\n.\n<ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<ul>\n<li>baz</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('1. foo\n2. bar\n3) baz\n.\n<ol>\n<li>foo</li>\n<li>bar</li>\n</ol>\n<ol start="3">\n<li>baz</li>\n</ol>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("Foo\n- bar\n- baz\n.\n<p>Foo</p>\n<ul>\n<li>bar</li>\n<li>baz</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("Markdown.pl")]),this._v(" does not allow this, through fear of triggering a list\nvia a numeral in a hard-wrapped line:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-markdown extra-class"},[e("pre",{pre:!0,attrs:{class:"language-markdown"}},[e("code",[this._v("The number of windows in my house is\n"),e("span",{attrs:{class:"token list punctuation"}},[this._v("14.")]),this._v("  The number of doors is 6.\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Oddly, though, "),e("code",[this._v("Markdown.pl")]),this._v(" "),e("em",[this._v("does")]),this._v(" allow a blockquote to\ninterrupt a paragraph, even though the same considerations might\napply.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-markdown extra-class"},[e("pre",{pre:!0,attrs:{class:"language-markdown"}},[e("code",[this._v("I need to buy\n"),e("span",{attrs:{class:"token list punctuation"}},[this._v("-")]),this._v(" new shoes\n"),e("span",{attrs:{class:"token list punctuation"}},[this._v("-")]),this._v(" a coat\n"),e("span",{attrs:{class:"token list punctuation"}},[this._v("-")]),this._v(" a plane ticket\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[e("a",{attrs:{href:"@"}},[this._v("principle of uniformity")]),this._v(":\nif a chunk of text has a certain\nmeaning, it will continue to have the same meaning when put into a\ncontainer block (such as a list item or blockquote).")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-markdown extra-class"},[n("pre",{pre:!0,attrs:{class:"language-markdown"}},[n("code",[t._v("  "),n("span",{attrs:{class:"token list punctuation"}},[t._v("*")]),t._v(" I need to buy\n"),n("span",{attrs:{class:"token code keyword"}},[t._v("    - new shoes")]),t._v("\n"),n("span",{attrs:{class:"token code keyword"}},[t._v("    - a coat")]),t._v("\n"),n("span",{attrs:{class:"token code keyword"}},[t._v("    - a plane ticket")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("is a list item containing a paragraph followed by a nested sublist,\nas all Markdown implementations agree it is (though the paragraph\nmay be rendered without "),e("code",[this._v("<p>")]),this._v(' tags, since the list is "tight"),\nthen')])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-markdown extra-class"},[e("pre",{pre:!0,attrs:{class:"language-markdown"}},[e("code",[this._v("I need to buy\n"),e("span",{attrs:{class:"token list punctuation"}},[this._v("-")]),this._v(" new shoes\n"),e("span",{attrs:{class:"token list punctuation"}},[this._v("-")]),this._v(" a coat\n"),e("span",{attrs:{class:"token list punctuation"}},[this._v("-")]),this._v(" a plane ticket\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("In order to solve of unwanted lists in paragraphs with\nhard-wrapped numerals, we allow only lists starting with "),e("code",[this._v("1")]),this._v(" to\ninterrupt paragraphs.  Thus,")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("The number of windows in my house is\n14.  The number of doors is 6.\n.\n<p>The number of windows in my house is\n14.  The number of doors is 6.</p>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("The number of windows in my house is\n1.  The number of doors is 6.\n.\n<p>The number of windows in my house is</p>\n<ol>\n<li>The number of doors is 6.</li>\n</ol>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- foo\n\n- bar\n\n\n- baz\n.\n<ul>\n<li>\n<p>foo</p>\n</li>\n<li>\n<p>bar</p>\n</li>\n<li>\n<p>baz</p>\n</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- foo\n  - bar\n    - baz\n\n\n      bim\n.\n<ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>\n<p>baz</p>\n<p>bim</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- foo\n- bar\n\n\x3c!-- --\x3e\n\n- baz\n- bim\n.\n<ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n\x3c!-- --\x3e\n<ul>\n<li>baz</li>\n<li>bim</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("-   foo\n\n    notcode\n\n-   foo\n\n\x3c!-- --\x3e\n\n    code\n.\n<ul>\n<li>\n<p>foo</p>\n<p>notcode</p>\n</li>\n<li>\n<p>foo</p>\n</li>\n</ul>\n\x3c!-- --\x3e\n<pre><code>code\n</code></pre>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- a\n - b\n  - c\n   - d\n  - e\n - f\n- g\n.\n<ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d</li>\n<li>e</li>\n<li>f</li>\n<li>g</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("1. a\n\n  2. b\n\n   3. c\n.\n<ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ol>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Note, however, that list items may not be indented more than\nthree spaces.  Here "),e("code",[this._v("- e")]),this._v(" is treated as a paragraph continuation\nline, because it is indented more than three spaces:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- a\n - b\n  - c\n   - d\n    - e\n.\n<ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d\n- e</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("And here, "),e("code",[this._v("3. c")]),this._v(" is treated as in indented code block,\nbecause it is indented four spaces and preceded by a\nblank line.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("1. a\n\n  2. b\n\n    3. c\n.\n<ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n</ol>\n<pre><code>3. c\n</code></pre>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- a\n- b\n\n- c\n.\n<ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("* a\n*\n\n* c\n.\n<ul>\n<li>\n<p>a</p>\n</li>\n<li></li>\n<li>\n<p>c</p>\n</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- a\n- b\n\n  c\n- d\n.\n<ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- a\n- b\n\n  [ref]: /url\n- d\n.\n<ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- a\n- ```\n  b\n\n\n  ```\n- c\n.\n<ul>\n<li>a</li>\n<li>\n<pre><code>b\n\n\n</code></pre>\n</li>\n<li>c</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- a\n  - b\n\n    c\n- d\n.\n<ul>\n<li>a\n<ul>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n</ul>\n</li>\n<li>d</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("* a\n  > b\n  >\n* c\n.\n<ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n</li>\n<li>c</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- a\n  > b\n  ```\n  c\n  ```\n- d\n.\n<ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n<pre><code>c\n</code></pre>\n</li>\n<li>d</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- a\n.\n<ul>\n<li>a</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- a\n  - b\n.\n<ul>\n<li>a\n<ul>\n<li>b</li>\n</ul>\n</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("1. ```\n   foo\n   ```\n\n   bar\n.\n<ol>\n<li>\n<pre><code>foo\n</code></pre>\n<p>bar</p>\n</li>\n</ol>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("* foo\n  * bar\n\n  baz\n.\n<ul>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n<p>baz</p>\n</li>\n</ul>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-example extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- a\n  - b\n  - c\n\n- d\n  - e\n  - f\n.\n<ul>\n<li>\n<p>a</p>\n<ul>\n<li>b</li>\n<li>c</li>\n</ul>\n</li>\n<li>\n<p>d</p>\n<ul>\n<li>e</li>\n<li>f</li>\n</ul>\n</li>\n</ul>\n")])])])}],!1,null,null,null);s.options.__file="5.Container_blocks.md";e.default=s.exports}}]);